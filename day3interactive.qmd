---
title: "day3interactive"
format: html
editor: visual
---

```{r}
library(palmerpenguins)
library(dplyr)
```

```{r}
temperature <- 99

if (temperature > 97) {
  print("Temperature warning")
} else
  print("No temperature warning")
```

Create an if else statement for blue whales lengths. Create a variable blue whale, which has a value of 40. Add an if else statemenet that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<=20

```{r}
whale_length_m <- 40 

if (hwale_length_m > 35) {
  print("giant")
} else if (whale_length_m >= 20 & whale_length_m <= 35){
  print("MEDIUM")
} else (whale_length_m <= 20) {
  print("small")
}

```

# Switch statements

```{r}
housing_type <- "single"
switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))


if (housing_type == "whole") {
  print("400")
} else if (housing_type == "double"){
  print("750")
} else if (housing_type == "single") {
  print("400")
}

```

## Write a for loop with a conditional (if) statement that returns the means of all NUMERIC variables in the penguins dataset

-   is.numeric (asks is this thing numeric?

-   mean(vec, na.rm = TRUE)

```{r}
for (i in seq_along(penguins)){
  if (is.numeric(penguins[[i]])){
    penguins_mean <- mean(penguins[[i]], na.rm = TRUE )
    print(penguins_mean)
  } 
}

  

```

Functional programming for easier iterator

use apply() to iterate over rows or columns. MARGIN = 1 (rows), MARGIN = 2 (columns)

```{r}
apply( X = mtcars, MARGIN = 2, FUN = median)

apply(mtcars, 2, median)

```

# dplyr::across() example

Starter: find the mean flipper length of penguins by species:

```{r}
penguins %>% 
  group_by(species, sex, island) %>% 
  summarize(mean_flipper_length= mean(flipper_length_mm, na.rm = TRUE), sd_flipper_length = sd(flipper_length_mm, na.rm=TRUE), max_body_mass = max(body_mass_g, na.rm = TRUE))
```

use across in summarize to return means of columns with numeric values

```{r}
penguins %>% 
  group_by(species) %>% 
  summarize(across(where(is.numeric), mean, na.rm=TRUE))
```

## Detecting a string pattern 

```{r}
food <- "I love enchiladas"
str_detect(food, "burritos")
if (stringr::str_detect(food, "burritos")) {
  print("yay burritos!")
} else {
  print("What about burritos?")
}
```
